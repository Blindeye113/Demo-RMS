@page "/ticket"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CanidateApp.Shared
@using static CanidateApp.Shared.TicketReasonEnum;
@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager navManager
@inject AuthenticationStateProvider provider

@if (roles == null || tickets == null || ticketAssignments == null)
{
    <p><em>Loading...</em></p>
}
else if (roles.Contains("client"))
{
    <PageTitle>Ticket Assignment</PageTitle>

    <table class="table">
        <thead>
            <tr>
                <th>Site Id</th>
                <th>Reason</th>
                <th>Details</th>
                <th>Assigned To</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticketAssignment in ticketAssignments)
            {
                <tr>
                    <td>@ticketAssignment.TicketId.SiteId</td>
                    <td>@ticketAssignment.TicketId.Reason</td>
                    @if (@ticketAssignment.TicketId.Details != null)
                    {
                        <td>@ticketAssignment.TicketId.Details</td>
                    }
                    else
                    {
                        <td>No further details provided</td>
                    }
                    <td>@ticketAssignment.TicketId.Status </td>
                    @if (ticketAssignment.Contractor != null)
                    {
                        <td>
                            <select selected="@ticketAssignments.First(a => a.TicketId == ticketAssignment.TicketId).Contractor" @onchange="e => ticketAssignments.First(a => a.TicketId == ticketAssignment.TicketId).Contractor = e.Value!.ToString()">
                                @foreach (var c in contractorsTemp)
                                {
                                    <option value="@c">@($"{c}")</option>
                                }
                            </select>
                        </td>
                    }
                    else
                    {
                        <td>
                            <select @onchange="e => ticketAssignments.First(a => a.TicketId == ticketAssignment.TicketId).Contractor = e.Value!.ToString()">
                                <option value="">- No contractor set as of yet</option>
                                @foreach (var c in contractorsTemp)
                                {
                                    <option value="@c">@($"{c}")</option>
                                }
                            </select>
                        </td>
                    }                   
                    <td><button @onclick="() => UpdateAssignment(ticketAssignment.TicketId.Id)" class="btn btn-submit">UpdateTicket</button></td>       
                </tr>
            }
        </tbody>
    </table>
    
}
else if (roles.Contains("consumer"))
{
    <PageTitle>Ticket Submission</PageTitle>

    <UseSiteNameAndId Strategy="ExecutionStrategy.CacheAndNetwork" Context="result">
        <MudGrid>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4">
                    <MudForm Model="@ticketforum">
                        <MudSelect @bind-Value="ticketforum.SiteId" Label="Tower\Site" Class="mt-3">
                            <MudSelectItem Value="@Guid.Empty">Select A Tower/Site</MudSelectItem>
                            @foreach (var item in result.Sites)
                            {
                                <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect @bind-Value="ticketforum.Reason" T="TicketReason" Label="Reason" Class="mt-3">
                            @foreach (TicketReason item in Enum.GetValues(typeof(TicketReason)))
                            {
                                <MudSelectItem Value="item" />
                            }
                        </MudSelect>
                        <MudTextField @bind-Value="ticketforum.Details" Label="Details" Lines="5" FullWidth="true" Class="mt-3" />

                        <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else if (_retry)
                            {
                                <MudText>Retry</MudText>
                            }
                            else
                            {
                                <MudText>Submit</MudText>
                            }
                        </MudButton>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </UseSiteNameAndId>
}
else if (roles.Contains("contractor"))
{
    <PageTitle>Ticket's'</PageTitle>

    <table class="table">
        <thead>
            <tr>
                <th>Site Id</th>
                <th>Reason</th>
                <th>Details</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticketAssignment in ticketAssignments)
            {
                <tr>
                    <td>@ticketAssignment.TicketId.SiteId</td>
                    <td>@ticketAssignment.TicketId.Reason</td>
                    @if (@ticketAssignment.TicketId.Details != null)
                    {
                        <td>@ticketAssignment.TicketId.Details</td>
                    }
                    else
                    {
                        <td>No further details provided</td>
                    }
                    <td>@ticketAssignment.TicketId.Status </td>
                    <td><button @onclick="() => ResolveTicket(ticketAssignment.TicketId.Id)" class="btn btn-submit">Resolve Ticket</button></td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private bool _processing = false;
    private bool _retry = false;
    private List<string> contractorsTemp = new List<string>() { "Contractor1", "Contractor2" };

    Ticket ticketforum = new Ticket();

    private Ticket[]? tickets;
    private TicketAsignment[]? ticketAssignments;

    private string roles = null!;
    private string name = null!;

    async Task ValidSubmit()
    {
        _processing = true;
        _retry = false;
        var result = await Http.PostAsJsonAsync<Ticket>($"{navManager.BaseUri}api/ticket/PostTicket", ticketforum);
        if (result.IsSuccessStatusCode)
        {
            _processing = false;
        }     
        else
        {
            _processing = false;
            _retry = true;
        }
    }

    private async Task UpdateAssignment(int ticketId)
    {      
        var ticketAssignment = ticketAssignments!.First(t => t.Id == ticketId);
        var result = await Http.PostAsJsonAsync<TicketAsignment>($"{navManager.BaseUri}api/tickets/SaveTicketAsignments", ticketAssignment);
        ticketAssignments = await Http.GetFromJsonAsync<TicketAsignment[]>("api/tickets/getTicketAssignments");
    }

    private async Task ResolveTicket(int ticketId)
    {    
        var result = await Http.PostAsJsonAsync<int>($"{navManager.BaseUri}api/tickets/resolveTicket", ticketId);
        ticketAssignments = await Http.GetFromJsonAsync<TicketAsignment[]>("api/tickets/getTicketAssignments");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var claims = await provider.GetAuthenticationStateAsync();
            foreach (var claim in claims.User.Claims)
            {
                if (claim.Type == "extension_UserRoles")
                {
                    roles = claim.Value.ToLower();
                }
                if (claim.Type.ToLower().Contains("name"))
                {
                    name = claim.Value.ToLower();
                }
            }
            tickets = await Http.GetFromJsonAsync<Ticket[]>("api/tickets/GetTickets");
            ticketAssignments = await Http.GetFromJsonAsync<TicketAsignment[]>("api/tickets/GetTicketAsignmentsByContractor");
            if (roles.Contains("contractor"))
            {
                ticketAssignments = ticketAssignments!.Where(t => t.Contractor != null && name.Contains(t.Contractor.ToLower())).ToArray();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ee)
        {

        }
    }
}

<style>
    .btn {
        margin: 1rem 0;
        margin-right: auto;
    }

    .btn-submit {
        background-color: darkgreen;
        color: white;
    }

    select {        
        border-radius: 10px;
        background-color: transparent;
        box-shadow: 1px 1px 1px rgba(50, 50, 100, 0.3), -1px -1px 1px rgba(50, 50, 100, 0.3);        
    }

    option {
        padding: 0.3rem;
    }
</style>
